create database practice_task;

use practice_task;

create table AUTHOR (
AUTHOR_ID VARCHAR(10) PRIMARY KEY,
AUTHOR_NAME VARCHAR(20),
);

INSERT INTO AUTHOR VALUES ('A001','CHHAGAN');
INSERT INTO AUTHOR VALUES ('A002','MAGAN');

SELECT * FROM AUTHOR;

--DROP TABLE AUTHOR;

create table PUBLISHER (
PUBLISHER_ID VARCHAR(10) PRIMARY KEY,
PUBLISHER_NAME VARCHAR(20),
);

INSERT INTO PUBLISHER VALUES ('P001','PAVAN');
INSERT INTO PUBLISHER VALUES ('P002','MANAN');


SELECT * FROM PUBLISHER;

create table BOOKS (
BOOK_ID VARCHAR(10) PRIMARY KEY,
BOOK_NAME VARCHAR(20),
AUTHOR_ID VARCHAR(10) FOREIGN KEY REFERENCES AUTHOR(AUTHOR_ID),
PRICE NUMERIC,
PUBLISHER_ID VARCHAR(10) FOREIGN KEY REFERENCES PUBLISHER(PUBLISHER_ID),
);

INSERT INTO BOOKS VALUES ('B001','THE SECRET','A001',350.0,'P001');
INSERT INTO BOOKS VALUES ('B002','THE MILLANION','A002',400.0,'P001');
INSERT INTO BOOKS VALUES ('B003','I AM','A002',350.0,'P002');
INSERT INTO BOOKS VALUES ('B004','YOUTH','A002',400.0,'P001');

--DELETE FROM BOOKS WHERE PRICE = 350.0

SELECT * FROM BOOKS;

create table SHOPPING_CART (
SHOPPING_CART_ID INTEGER PRIMARY KEY IDENTITY(1,1),
BOOK_ID VARCHAR(10) FOREIGN KEY REFERENCES BOOKS(BOOK_ID),
PRICE NUMERIC,
DATE DATE DEFAULT GETDATE(),
QUANTITY INTEGER
);

--DROP TABLE SHOPPING_CART;

INSERT INTO SHOPPING_CART VALUES ('B001', 410.20, '2002-11-20', 3);
INSERT INTO SHOPPING_CART VALUES ('B002', 480.50, '2009-11-20', 8);
INSERT INTO SHOPPING_CART VALUES ('B003', 810.20, '2012-01-08', 5);
INSERT INTO SHOPPING_CART VALUES ('B004', 500.50, '2009-11-20', 12);

SELECT * FROM SHOPPING_CART;


create table CREDIT_CARD_DETAILS (
CREDIT_CARD_NUMBER VARCHAR(10) PRIMARY KEY,
CREDIT_CARD_TYPE VARCHAR(10),
EXPIRY_DATE DATE DEFAULT GETDATE(),
);

--DROP TABLE CREDIT_CARD_DETAILS;

INSERT INTO CREDIT_CARD_DETAILS VALUES ('C001','Rewards','2004-11-20');
INSERT INTO CREDIT_CARD_DETAILS VALUES ('C002','Secured','2020-01-12');
INSERT INTO CREDIT_CARD_DETAILS(CREDIT_CARD_NUMBER,CREDIT_CARD_TYPE) VALUES ('C003','Rewards');
INSERT INTO CREDIT_CARD_DETAILS VALUES ('C004','Cashback','2008-12-02');
INSERT INTO CREDIT_CARD_DETAILS VALUES ('C005','Student','2011-09-17');

SELECT * FROM CREDIT_CARD_DETAILS;

create table CUSTOMER (
CUSTOMER_ID VARCHAR(10) PRIMARY KEY,
CUSTOMER_NAME VARCHAR(20),
STREET_ADDRESS VARCHAR(30),
CITY VARCHAR(20),
PHONE_NUMBER NUMERIC(10),
CREDIT_CARD_NUMBER VARCHAR(10) FOREIGN KEY REFERENCES CREDIT_CARD_DETAILS(CREDIT_CARD_NUMBER),
);

--DROP TABLE CUSTOMER;

INSERT INTO CUSTOMER VALUES ('CUST001','Aahva','Shanti nagar','ahmadabad',9874694234,'C001');
INSERT INTO CUSTOMER VALUES ('CUST002','Aarav','laxmi nagar','vadodara',8974694234,'C002');
INSERT INTO CUSTOMER VALUES ('CUST003','KayrA','vastu laxmi','surat',8946621382,'C001');
INSERT INTO CUSTOMER VALUES ('CUST004','Mahira','nana mauva','rajkot',9906834325,'C003');

SELECT * FROM CUSTOMER;

create table SHIPPING_TYPE (
SHIPPING_TYPE VARCHAR(20) PRIMARY KEY,
SHIPPING_PRICE NUMERIC,
);

INSERT INTO SHIPPING_TYPE VALUES ('FTL Shipping',1000);
INSERT INTO SHIPPING_TYPE VALUES ('Intermodal',1200);
INSERT INTO SHIPPING_TYPE VALUES ('International air',5000);
INSERT INTO SHIPPING_TYPE VALUES ('RS Shipping',2000);
INSERT INTO SHIPPING_TYPE VALUES ('Tanker',3000);

SELECT * FROM SHIPPING_TYPE;

create table ORDER_DETAILS (
ORDER_ID INTEGER PRIMARY KEY IDENTITY(1,1),
CUSTOMER_ID VARCHAR(10) FOREIGN KEY REFERENCES CUSTOMER(CUSTOMER_ID),
SHIPPING_TYPE VARCHAR(20) FOREIGN KEY REFERENCES SHIPPING_TYPE(SHIPPING_TYPE),
DATE_OF_PURCHASE DATE,
SHOPPING_CART_ID INTEGER FOREIGN KEY REFERENCES SHOPPING_CART(SHOPPING_CART_ID),
);

--DROP TABLE ORDER_DETAILS;

INSERT INTO ORDER_DETAILS VALUES ('CUST001','International air','2005-02-12',1);	
INSERT INTO ORDER_DETAILS VALUES ('CUST001','FTL Shipping','2010-12-10',2);	
INSERT INTO ORDER_DETAILS VALUES ('CUST003','RS Shipping','2006-04-02',2);	
INSERT INTO ORDER_DETAILS VALUES ('CUST004','Intermodal','2015-11-22',3);	

SELECT * FROM ORDER_DETAILS;

create table PURCHASE_HISTORY (
CUSTOMER_ID VARCHAR(10) FOREIGN KEY REFERENCES CUSTOMER(CUSTOMER_ID),
ORDER_ID INTEGER FOREIGN KEY REFERENCES ORDER_DETAILS(ORDER_ID),
);



CREATE VIEW CUSTOMER_DETAILS 
AS 
SELECT C.CUSTOMER_NAME, C.STREET_ADDRESS + ', ' + C.CITY AS ADDRESS, O.SHIPPING_TYPE, O.DATE_OF_PURCHASE, S.SHIPPING_PRICE
FROM (
(ORDER_DETAILS AS O INNER JOIN CUSTOMER AS C ON O.CUSTOMER_ID = C.CUSTOMER_ID) 
INNER JOIN SHIPPING_TYPE AS S ON O.SHIPPING_TYPE = S.SHIPPING_TYPE
);


--DROP VIEW CUSTOMER_DETAILS;

SELECT * FROM CUSTOMER_DETAILS;

CREATE VIEW CUSTOMER_HISTORY 
AS 
SELECT C.CUSTOMER_ID, C.CUSTOMER_NAME, B.BOOK_ID, O.DATE_OF_PURCHASE, S.SHOPPING_CART_ID
FROM ((
(ORDER_DETAILS AS O RIGHT JOIN CUSTOMER AS C ON O.CUSTOMER_ID = C.CUSTOMER_ID) 
LEFT JOIN SHOPPING_CART AS S ON O.SHOPPING_CART_ID = S.SHOPPING_CART_ID)
LEFT JOIN BOOKS AS B ON S.BOOK_ID = B.BOOK_ID
);

--DROP VIEW CUSTOMER_HISTORY;

SELECT * FROM CUSTOMER_HISTORY;


